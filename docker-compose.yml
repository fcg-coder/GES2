version: '3.9'

services:
  nginx:
    container_name: nginx
    image: nginx
    build: 
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - 8080:80
    depends_on:
      - frontend
      # - webgl
    restart: always
    networks:
      - elastic

  postgres:
    container_name: data
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: postgres_db
      PGDATA: /var/lib/postgresql/data/pgdata/
    ports:
      - "5432:5432"
    volumes:
      # - ./map_data:/var/lib/postgresql/data/pgdata
       - map_data:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - elastic

  api:
    container_name: api
    build: 
      context: .
      dockerfile: Dockerfile.api
    image: api
    ports:
      - 8000:8000
    volumes:
      - ./api:/api
    environment:
      DB_HOST: postgres
      DB_NAME: postgres_db
      DB_USER: postgres_user
      DB_PASS: postgres_password
      ELASTICSEARCH_HOST: elasticsearch
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000 && python3 manage.py fill_database"
    depends_on:
      - postgres
      - elasticsearch

    networks:
      - elastic

  frontend:
    container_name: frontend
    build: 
      context: .
      dockerfile: Dockerfile.frontend
    depends_on:
      - api
    # ports:
    #   - 3000:3000
    restart: always
    networks:
      - elastic

  webgl:
    container_name: webgl
    image: webgl
    build: 
      context: .
      dockerfile: Dockerfile.webgl
      # dockerfile: webgl/Dockerfile
    ports:
      - 8001:8001
    depends_on:
      - frontend
    networks:
      - elastic
 
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_USERNAME=elastic
      - xpack.security.enabled=false
      - network.host=0.0.0.0
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - ES_JAVA_OPTS=-Xms2g
      - ES_JAVA_OPTS=-Xmx2g


    ports:
      - "9200:9200"
    networks:
      - elastic
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5



  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.15.2
    
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - NODE_OPTIONS=--openssl-legacy-provider
      - xpack.fleet.enabled=true

    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - elastic

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:8.15.3
    user: root
    volumes:
      - ./metricbeat.docker.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    command: >
      metricbeat -e
      -E 'output.elasticsearch.hosts=["elasticsearch:9200"]'
    depends_on:
      - elasticsearch
    networks:
      - elastic

volumes:
  map_data:
  esdata:
    driver: local

networks:
  elastic:
    driver: bridge
